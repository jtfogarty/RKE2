# Wait for Server 1 to be ready before continuing with component deployment
- name: Wait for k8s nodes with node label 'server=true' to be ready
  ansible.builtin.command:
    cmd: "kubectl wait --for=condition=Ready nodes --selector server=true --timeout=600s"
  register: nodes_ready
  retries: 120
  delay: 10
  changed_when: true
  become_user: "{{ ansible_user }}"
  when: inventory_hostname == groups['server_nodes'][0]

- name: Add nfs-subdir-external-provisioner Helm repository
  kubernetes.core.helm_repository:
    name: nfs-subdir-external-provisioner
    repo_url: https://kubernetes-sigs.github.io/nfs-subdir-external-provisioner/
  when: inventory_hostname == groups['server_nodes'][0]
  tags: 
    - addNFS

- name: Install nfs-subdir-external-provisioner
  kubernetes.core.helm:
    name: nfs-subdir-external-provisioner
    chart_ref: nfs-subdir-external-provisioner/nfs-subdir-external-provisioner
    release_namespace: nfs-nas3e8d86
    create_namespace: true
    update_repo_cache: true
    values:
      nfs:
        server: nas3e8d86
        path: /share/NFSv=4/k8s-storage
      storageClass:
        name: nfs-client-new
        defaultClass: true
        reclaimPolicy: Delete
  when: inventory_hostname == groups['server_nodes'][0]
  tags: 
    - addNFS

- name: Ensure kubeconfig file exists and has correct permissions
  ansible.builtin.file:
    path: /etc/rancher/rke2/rke2.yaml
    state: file
    mode: '0644'
  when: inventory_hostname == groups['server_nodes'][0]
  become: false

- name: Check if kubeconfig file exists
  ansible.builtin.stat:
    path: /etc/rancher/rke2/rke2.yaml
  register: kubeconfig_stat
  when: inventory_hostname == groups['server_nodes'][0]

- name: Fail if kubeconfig file does not exist
  ansible.builtin.fail:
    msg: "Kubeconfig file not found at /etc/rancher/rke2/rke2.yaml"
  when: 
    - inventory_hostname == groups['server_nodes'][0]
    - not kubeconfig_stat.stat.exists

# Remove existing components if force_reinstall_components is true
- name: Remove existing components
  block:
    - name: Check for Rancher in all namespaces
      ansible.builtin.shell:
        cmd: helm list --all-namespaces | grep rancher
      register: helm_list_all
      changed_when: false
      failed_when: false 

    - name: Debug Helm list all output
      debug:
        var: helm_list_all

    - name: Remove rancher-provisioning-capi
      kubernetes.core.helm:
        kubeconfig: "/etc/rancher/rke2/rke2.yaml"
        name: rancher-provisioning-capi
        release_namespace: cattle-provisioning-capi-system
        state: absent
      when: "'rancher-provisioning-capi' in helm_list_all.stdout"

    - name: Remove rancher-webhook
      kubernetes.core.helm:
        kubeconfig: "/etc/rancher/rke2/rke2.yaml"
        name: rancher-webhook
        release_namespace: cattle-system
        state: absent
      when: "'rancher-webhook' in helm_list_all.stdout"

    - name: Remove Rancher
      kubernetes.core.helm:
        kubeconfig: "/etc/rancher/rke2/rke2.yaml"
        name: rancher
        release_namespace: cattle-system
        state: absent

    - name: Check for remaining Rancher resources
      ansible.builtin.command:
        cmd: kubectl get all,ingress,secrets -l app=rancher -A
      register: rancher_resources
      changed_when: false

    - name: Remove remaining Rancher resources
      ansible.builtin.command:
        cmd: kubectl delete all,ingress,secrets -l app=rancher -A
      when: rancher_resources.stdout != ""

    - name: Remove cert-manager
      kubernetes.core.helm:
        kubeconfig: "/etc/rancher/rke2/rke2.yaml"
        name: cert-manager
        release_namespace: cert-manager
        state: absent

    - name: Remove MetalLB
      ansible.builtin.command:
        cmd: kubectl delete -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-native.yaml
      ignore_errors: true
      when: metallb_reinstall_components | bool

  when: 
    - inventory_hostname == groups['server_nodes'][0]
    - force_reinstall_components | bool
  tags:
    - cert-manager
    - rancher

# Deploy MetalLB
- name: Deploy MetalLB and configure IP pool
  block:
    - name: Apply MetalLB namespace and resources
      ansible.builtin.command:
        cmd: kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/{{ metallb_version }}/config/manifests/metallb-native.yaml
      changed_when: true

    - name: Wait for MetalLB pods to be ready
      ansible.builtin.command:
        cmd: "kubectl wait --namespace metallb-system --for=condition=ready pod --selector=component=controller --timeout=1800s"
      changed_when: true

    - name: Apply MetalLB L2 Advertisement
      ansible.builtin.command:
        cmd: kubectl apply -f https://raw.githubusercontent.com/JamesTurland/JimsGarage/main/Kubernetes/RKE2/l2Advertisement.yaml
      changed_when: true

    - name: Apply MetalLB IP pool configuration
      ansible.builtin.template:
        src: templates/metallb-ippool.j2
        dest: /home/{{ ansible_user }}/ippool.yaml
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: '0755'

    - name: Apply MetalLB IP pool
      ansible.builtin.command:
        cmd: kubectl apply -f /home/{{ ansible_user }}/ippool.yaml
      environment:
        KUBECONFIG: /home/{{ ansible_user }}/.kube/config
  become_user: "{{ ansible_user }}"
  when: false #inventory_hostname == groups['server_nodes'][0]
  tags:
    - metallb

# Deploy cert-manager
- name: Deploy cert-manager
  block:
    - name: Check cert-manager namespace status
      kubernetes.core.k8s_info:
        kind: Namespace
        name: cert-manager
      register: cert_manager_ns
      ignore_errors: true

    - name: Remove existing cert-manager installation
      kubernetes.core.helm:
        name: cert-manager
        release_namespace: cert-manager
        state: absent
      when: cert_manager_ns.resources is defined and cert_manager_ns.resources | length > 0

    - name: Install cert-manager
      kubernetes.core.helm:
        name: cert-manager
        chart_ref: jetstack/cert-manager
        release_namespace: cert-manager
        create_namespace: true
        chart_version: v1.13.3
        wait: true
        wait_timeout: 600s
        values:
          installCRDs: true
          webhook:
            timeoutSeconds: 30
            enabled: true
            securePort: 10250
            caSecretName: cert-manager-webhook-ca
            tlsSecretName: cert-manager-webhook-tls
          cainjector:
            enabled: true
          startupapicheck:
            enabled: true

    - name: Create ClusterIssuer for Let's Encrypt
      kubernetes.core.k8s:
        definition:
          apiVersion: cert-manager.io/v1
          kind: ClusterIssuer
          metadata:
            name: letsencrypt-prod
          spec:
            acme:
              server: https://acme-v02.api.letsencrypt.org/directory
              email: "{{ lookup('env', 'LETSENCRYPT_EMAIL') }}"
              privateKeySecretRef:
                name: letsencrypt-prod
              solvers:
                - dns01:
                    namecheap:
                      apiKeySecretRef: 
                        name: namecheap-api-key
                        key:  "{{ lookup('env', 'NAMECHEAP_API_KEY') }}"
                      #apiUrl: "https://api.namecheap.com/xml.response"
                      username: "{{ lookup('env', 'NAMECHEAP_USERNAME') }}"
                      # Adjust this if using a different DNS provider or solver
                      # Example for HTTP01 solver:
                      # - http01: {}

    - name: Debug cert-manager installation result
      debug:
        var: cert_manager_install_result

  when: inventory_hostname == groups['server_nodes'][0]
  tags:
    - cert-manager

# Deploy Rancher
- name: Deploy Rancher
  block:
    - name: Add Rancher Helm repository
      kubernetes.core.helm_repository:
        name: rancher-stable
        repo_url: https://releases.rancher.com/server-charts/stable

    - name: Create namespace for Rancher
      kubernetes.core.k8s:
        kubeconfig: "/etc/rancher/rke2/rke2.yaml"
        name: cattle-system
        api_version: v1
        kind: Namespace
        state: present

    - name: Check for existing Rancher resources
      ansible.builtin.command:
        cmd: kubectl get all,ingress,secrets -n cattle-system -l app=rancher
      register: rancher_resources
      changed_when: false
      failed_when: false

    - name: Debug Rancher resources
      debug:
        var: rancher_resources

    - name: Remove existing Rancher resources
      ansible.builtin.command:
        cmd: kubectl delete all,ingress,secrets -n cattle-system -l app=rancher
      when: rancher_resources.stdout != ""
      ignore_errors: true

    - name: Check for Rancher Helm secrets
      ansible.builtin.command:
        cmd: kubectl get secrets -n cattle-system -l name=rancher,owner=helm
      register: rancher_helm_secrets
      changed_when: false
      failed_when: false

    - name: Debug Rancher Helm secrets
      debug:
        var: rancher_helm_secrets

    - name: Remove Rancher Helm secrets
      ansible.builtin.command:
        cmd: kubectl delete secrets -n cattle-system -l name=rancher,owner=helm
      when: rancher_helm_secrets.stdout != ""
      ignore_errors: true

    - name: Install Rancher
      kubernetes.core.helm:
        name: rancher
        chart_ref: rancher-stable/rancher
        release_namespace: cattle-system
        create_namespace: true
        wait: true
        values:
          hostname: "{{ rancher_hostname }}"
          bootstrapPassword: "{{ rancher_bootstrap_password }}"
          ingress:
            tls:
              source: letsEncrypt
          letsEncrypt:
            email: "{{ lookup('env', 'LETSENCRYPT_EMAIL') }}"
            ingress:
              class: nginx
          certmanager:
            version: v1.13.3
          extraEnv:
            - name: CATTLE_UI_PLUGIN_SYSTEM
              value: "true"
          tls: external
          privateCa: false
          replicas: 3

    - name: Debug Rancher installation result
      debug:
        var: rancher_install_result

    - name: Wait for Rancher to be ready
      kubernetes.core.k8s_info:
        kubeconfig: "/etc/rancher/rke2/rke2.yaml"
        kind: Deployment
        namespace: cattle-system
        name: rancher
      register: rancher_deployment
      until: rancher_deployment.resources[0].status.readyReplicas is defined and rancher_deployment.resources[0].status.readyReplicas == rancher_deployment.resources[0].spec.replicas
      retries: 20
      delay: 30
  when: inventory_hostname == groups['server_nodes'][0]
  tags:
    - rancher

---
# Create necessary directories
- name: Create directory for RKE2 config
  ansible.builtin.file:
    path: "/etc/rancher/rke2"
    state: directory
    mode: '0755'

- name: Create directory for RKE2 token
  ansible.builtin.file:
    path: "/var/lib/rancher/rke2/server"
    state: directory
    mode: '0755'

# Start and enable RKE2 server on the first node
- name: Ensure RKE2 server is enabled and running on first node
  ansible.builtin.systemd:
    name: rke2-server
    enabled: true
    state: started
    daemon_reload: true
  when: inventory_hostname == groups['server_nodes'][0]

# Wait for and fetch the token
- name: Wait for node-token on first node
  ansible.builtin.wait_for:
    path: /var/lib/rancher/rke2/server/node-token
  when: inventory_hostname == groups['server_nodes'][0]

- name: Fetch the token from the first server node
  ansible.builtin.slurp:
    src: /var/lib/rancher/rke2/server/node-token
  register: rke2_token
  when: inventory_hostname == groups['server_nodes'][0]

- name: Set token fact for first server
  ansible.builtin.set_fact:
    rke2_token: "{{ rke2_token['content'] | b64decode | trim }}"
  when: inventory_hostname == groups['server_nodes'][0]

- name: Distribute RKE2 token to all nodes
  ansible.builtin.set_fact:
    rke2_token: "{{ hostvars[groups['server_nodes'][0]]['rke2_token'] }}"
  when: groups['server_nodes'][0] in hostvars and 'rke2_token' in hostvars[groups['server_nodes'][0]]
  failed_when: rke2_token is not defined


- name: Ensure token file exists on all server nodes
  ansible.builtin.copy:
    content: "{{ rke2_token }}"
    dest: "/var/lib/rancher/rke2/server/node-token"
    mode: '0600'
  when: inventory_hostname in groups['server_nodes']

# Configure and start RKE2 on nodes 2 and 3
- name: Deploy RKE2 server Configuration on nodes 2 and 3
  ansible.builtin.template:
    src: templates/rke2-server-config.j2
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: '0644'
  when: 
    - configure_additional_nodes | default(false) | bool
    - inventory_hostname in [groups['server_nodes'][1], groups['server_nodes'][2]]

- name: Ensure RKE2 server is enabled and running on nodes 2 and 3
  ansible.builtin.systemd:
    name: rke2-server
    enabled: true
    state: started
    daemon_reload: true
  when: 
    - inventory_hostname in [groups['server_nodes'][1], groups['server_nodes'][2]]
    - configure_additional_nodes | default(false) | bool

- name: Wait for RKE2 server to be ready on nodes 2 and 3
  ansible.builtin.wait_for:
    path: /var/lib/rancher/rke2/server/node-token
    state: present
    timeout: 300
  when: 
    - configure_additional_nodes | default(false) | bool
    - inventory_hostname in [groups['server_nodes'][1], groups['server_nodes'][2]]

# Deploy configurations and service files
- name: Deploy RKE2 server Configuration
  ansible.builtin.template:
    src: templates/rke2-server-config.j2
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: '0644'
    force: yes
  when: inventory_hostname in groups['server_nodes']
  register: rke2_config


- name: Create systemd service file for RKE2 server
  ansible.builtin.template:
    src: templates/rke2-server.service.j2
    dest: /etc/systemd/system/rke2-server.service
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups['server_nodes']

- name: Create systemd service file for RKE2 agent
  ansible.builtin.template:
    src: templates/rke2-agent.service.j2
    dest: /etc/systemd/system/rke2-agent.service
    owner: root
    group: root
    mode: '0644'
  when: inventory_hostname in groups['agent_nodes']

# Set up kubectl and kubeconfig
- name: Wait for kubectl
  ansible.builtin.wait_for:
    path: /var/lib/rancher/rke2/bin/kubectl
  when: inventory_hostname in groups['server_nodes']

- name: Copy kubectl to user bin
  ansible.builtin.copy:
    src: /var/lib/rancher/rke2/bin/kubectl
    dest: /usr/local/bin/kubectl
    mode: '0755'
    remote_src: true
  become: true
  when: inventory_hostname in groups['server_nodes']

- name: Wait for kubectl in user bin
  ansible.builtin.wait_for:
    path: /usr/local/bin/kubectl
  when: inventory_hostname in groups['server_nodes']

- name: Ensure .kube directory exists in user's home on all server nodes
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    mode: '0755'
  become: true

- name: Wait for RKE2 kubeconfig file
  ansible.builtin.wait_for:
    path: /etc/rancher/rke2/rke2.yaml
  when: inventory_hostname == groups['server_nodes'][0]

- name: Fetch kubeconfig from first server node
  ansible.builtin.fetch:
    src: /etc/rancher/rke2/rke2.yaml
    dest: /tmp/rke2.yaml
    flat: yes
  when: inventory_hostname == groups['server_nodes'][0]

- name: Ensure .kube directory exists on all server nodes
  ansible.builtin.file:
    path: "/home/{{ ansible_user }}/.kube"
    state: directory
    mode: '0755'
  become: true

- name: Fetch kubeconfig from first server node
  ansible.builtin.fetch:
    src: /etc/rancher/rke2/rke2.yaml
    dest: /tmp/rke2.yaml
    flat: yes
  when: inventory_hostname == groups['server_nodes'][0]

- name: Copy kubeconfig to all server nodes
  ansible.builtin.copy:
    src: /tmp/rke2.yaml
    dest: "/home/{{ ansible_user }}/.kube/config"
    owner: "{{ ansible_user }}"
    mode: "u=rw,g=,o="
  become: true

- name: Replace localhost with VIP in kubeconfig files
  ansible.builtin.replace:
    path: "{{ item }}"
    regexp: 'https://127.0.0.1:6443'
    replace: "https://{{ vip }}:6443"
  loop:
    - "/home/{{ ansible_user }}/.kube/config"
    - "/etc/rancher/rke2/rke2.yaml"
  when: inventory_hostname in groups['server_nodes']

- name: Ensure /root/.kube directory exists
  ansible.builtin.file:
    path: /root/.kube
    state: directory
    mode: '0700'
  become: true

- name: Copy kubeconfig to root user
  ansible.builtin.copy:
    src: "/home/{{ ansible_user }}/.kube/config"
    dest: /root/.kube/config
    remote_src: true
    mode: '0600'
  become: true

- name: Set KUBECONFIG environment variable
  ansible.builtin.lineinfile:
    path: "/home/{{ ansible_user }}/.bashrc"
    line: "export KUBECONFIG=/home/{{ ansible_user }}/.kube/config"
    create: yes

- name: Reload .bashrc
  ansible.builtin.shell: source /home/{{ ansible_user }}/.bashrc
  args:
    executable: /bin/bash

- name: Wait for kubeconfig to be accessible
  ansible.builtin.wait_for:
    path: "/home/{{ ansible_user }}/.kube/config"
    state: present
    timeout: 300

- name: Verify kubeconfig is valid
  ansible.builtin.command: kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes
  register: kubectl_result
  changed_when: false
  failed_when: kubectl_result.rc != 0
  retries: 6
  delay: 10
  environment:
    KUBECONFIG: /etc/rancher/rke2/rke2.yaml

